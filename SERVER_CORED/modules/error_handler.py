from modules.logger import Logger
import traceback
import smtplib
from email.mime.text import MIMEText
import requests

log = Logger()

class CriticalError(Exception):
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
    pass

class ValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    pass

class ErrorHandler:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    EMAIL_CONFIG = {
        "enabled": True,
        "smtp_server": "smtp.example.com",
        "smtp_port": 587,
        "username": "your_email@example.com",
        "password": "your_email_password",
        "recipient": "admin@example.com"
    }

    TELEGRAM_CONFIG = {
        "enabled": True,
        "bot_token": "YOUR_BOT_TOKEN",
        "chat_id": "YOUR_CHAT_ID"
    }

    @staticmethod
    def handle_exception(e: Exception, critical: bool = False):
        error_message = f"[ERROR]: {str(e)}\n{traceback.format_exc()}"
        if critical:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{error_message}")
            ErrorHandler.send_alert(error_message)
            raise CriticalError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û—Å—Ç–∞–Ω–æ–≤ —Å–∏—Å—Ç–µ–º—ã.")
        else:
            log.warning(f"–ù–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞:\n{error_message}")

    @staticmethod
    def send_alert(message: str):
        if ErrorHandler.EMAIL_CONFIG["enabled"]:
            ErrorHandler.send_email_alert(message)
        if ErrorHandler.TELEGRAM_CONFIG["enabled"]:
            ErrorHandler.send_telegram_alert(message)

    @staticmethod
    def send_email_alert(message: str):
        try:
            config = ErrorHandler.EMAIL_CONFIG
            msg = MIMEText(message)
            msg["Subject"] = "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            msg["From"] = config["username"]
            msg["To"] = config["recipient"]

            with smtplib.SMTP(config["smtp_server"], config["smtp_port"]) as server:
                server.starttls()
                server.login(config["username"], config["password"])
                server.send_message(msg)
            
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email: {e}")

    @staticmethod
    def send_telegram_alert(message: str):
        try:
            config = ErrorHandler.TELEGRAM_CONFIG
            url = f"https://api.telegram.org/bot{config['bot_token']}/sendMessage"
            payload = {
                "chat_id": config["chat_id"],
                "text": f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{message}",
                "parse_mode": "Markdown"
            }
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {response.text}")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    @staticmethod
    def safe_execute(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π."""
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                ErrorHandler.handle_exception(e)
                return None
        return wrapper
